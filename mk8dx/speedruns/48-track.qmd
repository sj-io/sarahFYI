---
title: "MK8DX 48 Track Speedruns"
format: 
  dashboard:
    orientation: columns
---

```{r libs, message=FALSE}
# devtools::install_github("sj-io/mk8dx")
library(mk8dx)
library(tidyverse)
library(reactable)
library(plotly)
```

```{r getNewData, eval=FALSE}
# define file path to splits
current_dir <- "/Users/sarah/Projects/data/mario-kart/splits/"
archive_dir <- "/Users/sarah/Projects/data/mario-kart/splits/archive/cartridge"

# get split data as table
current_splits <- mk_lss(current_dir)
archive_splits <- mk_lss(archive_dir) # cartridge splits

# clean up columns w/ same data but diff labels
archive_splits <- archive_splits |> 
  mutate(cc = if_else(!is.na(engine_class), engine_class, cc)) |> 
  select(-engine_class)

# bind new & old data
all_splits <- bind_rows(current_splits, archive_splits)

# update patch number data
all_splits <- all_splits |> 
  mutate(
    patch_number = case_when(
      str_detect(patch_number, "^2.3.0") ~ "2.3.0+",
      .default = "Pre-2.3.0"
      ))

write_csv(all_splits, "splits.csv")
```

```{r theming}
# violin plot styling
violin_style <- function(df, x_value, y_value) {
  df |> 
  ggplot(aes({{x_value}}, {{y_value}})) +
  geom_violin(scale = "width", aes(fill = sd, color = sd, text = label), linewidth = .3) +
  stat_summary(fun = "mean", geom = "crossbar", size = .2, aes(color = sd)) +
  stat_summary(fun = "median", geom = "point", size = .4, aes(color = sd), alpha = .8) +
  scale_fill_gradient2(low = "#8F150A", mid = "#F25041", high = "#FCD3CF") +
  scale_color_gradient(low = "#8F150A", high = "#F25041") +
  scale_y_time() +
  scale_x_discrete(limits = rev) +
  coord_flip() +
  theme_minimal() +
  labs(x = "",
       y = "") +
  theme(text = element_text(color = "#D2DDF9"),
        axis.text.x = element_text(angle = 45,
                                   hjust = 0.98,
                                   vjust = 0.9, 
                                   color = "#D2DDF9"),
        axis.text = element_text(size = 8, color = "#D2DDF9"),
        # axis.ticks = element_line(linewidth = .2, color = "#4976E9"),
        plot.background = element_rect(fill = NA),
        panel.background = element_rect(fill = NA),
        panel.grid = element_line(linewidth = .2, color = "#4976E9"),
        # plot.margin = margin(0, 5, 0, 0),
        # panel.border = element_rect(fill = NA, linewidth = .2, color = "#D2DDF9"),
        legend.position = "none")
}

# table theme
options(reactable.theme = reactableTheme(
  color = "#D2DDF9",
  backgroundColor = "#1643B6",
  borderColor = "#0c2461",
  stripedColor = "#4976E9",
  highlightColor = "#0c2461",
  style = list(fontSize = "10px"),
  searchInputStyle = list(
    width = "100%", 
    borderRadius = "0px",
    backgroundColor = "#4976E9", 
    fontColor = "#D2DDF9",
    "::placeholder" = list(color = "#0c2461"))
))

# color range for traces plot
color_range <- colorRampPalette(c("#FCD3CF", "#F25041", "#8F150A"), space = "Lab", interpolate = "linear")

# time formatting

clean_hms <- function(attempt_real_time) {  round(seconds_to_period({{attempt_real_time}}), 2) }
```

```{r getData, message=FALSE}
all_splits <- read_csv("splits.csv")
runs <- all_splits |> filter(total_attempts != 0)
# not_run <- all_splits |> filter(total_attempts == 0)
```

## Sidebar {.sidebar width="200px"}

This dashboard shows an overview of my Mario Kart 8 Deluxe speedruns.

<details>
<summary>Show/Hide explanation of speedrunning, data, and graphs</summary>
**Speedrunning** is trying to complete a game as fast as possible. Each speedrunning attempt is called a run. Each segment of a run is called a split (synonymous with “track” in Mario Kart). The most popular way to speedrun MK8DX is to play through all of the original 48 tracks, which takes about two hours on 150cc.

The **Run Times** graph shows how my long each run has taken me to complete.

The **Improvement from Slowest Run** graph shows this data with more detail. Each line is a completed run, comparing my cumulative run time for each track to that of my slowest run. The lowest colored line is my current personal best (PB), AKA the fastest time I’ve run the category.

The orange dots show tracks where my PB run had a slower time than a previous run, indicating a **possible time save**; the size of the dot indicates how much time save is available. The grey line is my hypothetical best possible time, the cumulative sum of my best time for each track across all run attempts. Hover over any point/line for more detail.

The **Segment Times** shows a distribution of how long it has taken me to complete each track. If my times have been consistent, the violin will be dark and short. If my times vary a lot, the violin will be lighter and longer. 
</details>

```{r}
the_48 <- runs |> 
  # narrow table
  filter(category == "48 Tracks") |> 
  janitor::remove_empty("cols") |> 
  # get track names
  left_join(tracks |> select(trk_ID, track, console), by = c("segment_id" = "trk_ID")) |> 
  mutate(segment_name = if_else(!is.na(console), str_c(track, " [", console, "]"), track)) |> 
  select(-c(console, track)) |> 
  # only completed tracks
  filter(!is.na(segment_id)) |> 
  # if using multiple split files, correct the summarized values
  arrange(attempt_started) |> 
  mutate(attempt_id = cur_group_id(), .by = "attempt_started") |> 
  mutate(best_segment_real_time = min(segment_real_time, na.rm = TRUE), 
         .by = "segment_id")
```

## C1 {width=20%}

### R1 Run Graph {height="40%"}

```{r}
#| title: "Run Times"

complete_48_runs <- the_48 |> 
  filter(segment_id == 48) |> 
  select(attempt_id, attempt_started, attempt_real_time) |> 
  mutate(label = paste0(
    "<b>Run #", attempt_id, "</b>",
    "<br><b>Time:</b> ", clean_hms(attempt_real_time)
  ))

line_48 <- complete_48_runs |> 
  ggplot() +
  geom_line(aes(attempt_id, attempt_real_time), color = "gold") +
  geom_point(aes(attempt_id, attempt_real_time, text = label), color = "gold") +
  scale_y_time() +
  theme_minimal() +
  labs(x = "", y = "") +
  theme(text = element_text(color = "#D2DDF9"),
        # axis.ticks = element_line(linewidth = .2, color = "#4976E9"),
        axis.text.y = element_text(size = 8, color = "#D2DDF9"),
        axis.text.x = element_blank(),
        plot.background = element_rect(fill = NA),
        panel.background = element_rect(fill = NA),
        panel.grid = element_line(linewidth = .2, color = "#4976E9")
        # panel.border = element_rect(fill = NA, linewidth = .2, color = "#D2DDF9")
        )

line_48_p <- ggplotly(line_48, tooltip = "text") |> 
  layout(
    margin = list(t = 0, r = 10, b = 0, l = 0, pad = 0)
    )
config(line_48_p, displayModeBar = FALSE)
```

### R2 Tables {.tabset}

```{r}
#| title: "Attempts"

the_48_table <- the_48 |> 
  select(attempt_id:attempt_ended, attempt_real_time, version,
         segment_id, segment_name, segment_real_time, best_segment_real_time) |> 
  mutate(pb_diff = round(segment_real_time - best_segment_real_time, 1)) |> 
  mutate(across(ends_with("real_time"), ~ seconds_to_period(round(.)) |> as.character()))

tbl_attempt_48 <- the_48_table |> 
  select(attempt_id:version) |> 
  distinct()

reactable(tbl_attempt_48,
          striped = TRUE, highlight = TRUE, defaultSortOrder = "desc", defaultSorted = "attempt_id", compact = TRUE, pagination = TRUE,
          paginationType = "simple", defaultPageSize = 20,
          # width = 340,
          columns = list(
          attempt_id = colDef("run #", align = "left", maxWidth = 60),
          attempt_started = colDef("date", format = colFormat(date = TRUE)),
          attempt_ended = colDef("end", format = colFormat(datetime = TRUE), show = FALSE),
          attempt_real_time = colDef("real time"),
          version = colDef(maxWidth = 75)
          ))
```

```{r}
#| title: "Segments"
tbl_segment_48 <- the_48_table |> select(attempt_id, segment_id:pb_diff)

reactable(tbl_segment_48,
          striped = TRUE, highlight = TRUE, defaultSortOrder = "desc", defaultSorted = "attempt_id", compact = TRUE, pagination = TRUE, 
          paginationType = "simple", defaultPageSize = 20,
          searchable = TRUE, wrap = FALSE,
          columns = list(
          attempt_id = colDef("run #", align = "left", maxWidth = 55),
          segment_id = colDef("track #", maxWidth = 70, show = FALSE),
          segment_name = colDef("track", minWidth = 150),
          segment_real_time = colDef("real time", maxWidth = 70, style = function(value, index) {
            pb_time <- tbl_segment_48$pb_diff[index]
                
            if (!is.na(value) & pb_time == 0) {
              list(background = "gold", fontWeight = "bold", color = "#0c2461")
            }

          }),
          best_segment_real_time = colDef("PB time", show = FALSE),
          pb_diff = colDef("PB diff", maxWidth = 50)
          ))
```

## C2 

### R1 Value Boxes {height=18%}

```{r}
# value boxes
v_complete_runs <- the_48[which(!is.na(the_48$attempt_real_time)), "attempt_id"]
v_complete_runs <- length(unique(v_complete_runs$attempt_id))
v_attempt_runs <- the_48[which(is.na(the_48$attempt_real_time)), "attempt_id"]
v_attempt_runs <- length(unique(v_attempt_runs$attempt_id))
v_runs <- paste(v_attempt_runs, "/", v_complete_runs)

v_run_PB <- seconds_to_period(round(min(the_48$attempt_real_time, na.rm = TRUE)))
v_most_recent <- max(the_48$attempt_started, na.rm = TRUE) |> as_date()
```

```{r}
#| content: valuebox
#| title: "Runs Completed / Attempted"
list(
  value = v_runs,
  color = "#1643B6"
)
```

```{r}
#| content: valuebox
#| title: "Most Recent Run"
list(
  value = v_most_recent,
  color = "#4976E9"
)
```

```{r}
#| content: valuebox
#| title: "PB Time"
list(
  value = v_run_PB,
  color = "warning"
)
```

### R2 Traces

```{r}
#| title: "Improvement"

# only completed attempts
improvement_48 <- the_48[, c("attempt_id", "attempt_started", "attempt_real_time", "segment_id", "segment_name", "segment_real_time", "best_segment_real_time")] |> 
  filter(!is.na(attempt_real_time)) |> 
  mutate(run_real_time = cumsum(segment_real_time), .by = "attempt_id")

# create a start row for each attempt
start_48 <- improvement_48[, c("attempt_id", "attempt_started", "attempt_real_time")] |>
  distinct() |>
  mutate(
    segment_id = 0,
    segment_name = "Start",
    segment_real_time = 0,
    run_real_time = 0,
    best_segment_real_time = 0
  )

improvement_48 <- bind_rows(improvement_48, start_48) |> 
  arrange(attempt_id, segment_id) |> 
  mutate(segment_name = fct_inorder(segment_name))

worst_run_48 <- improvement_48 |> 
  select(attempt_id, attempt_real_time, segment_id, segment_real_time) |> 
  slice_max(attempt_real_time, by = segment_id, with_ties = FALSE) |> 
  mutate(worst_run_real_time = cumsum(segment_real_time)) |> 
  select(segment_id, worst_run_real_time)

improvement_48 <- improvement_48 |> 
  left_join(worst_run_48, by = "segment_id") |> 
  mutate(worst_run_diff = worst_run_real_time - run_real_time)

best_possible_time_48 <- improvement_48 |> 
  filter((segment_name != "Start" & best_segment_real_time == segment_real_time) | (segment_name == "Start" & attempt_id == 1)) |> 
  select(segment_id, segment_name, best_segment_real_time, worst_run_real_time, attempt_started) |> 
  distinct() |> 
  arrange(segment_id) |> 
  mutate(
    pb_run_real_time = cumsum(best_segment_real_time),
    pb_run_diff = worst_run_real_time - pb_run_real_time,
    attempt_id = 0,
    label = paste0(
      "<b>Best Possible Time</b>",
      "<br><b>Track:</b> ", segment_name,
      "<br><b>PB Date:</b> ", attempt_started,
      "<br><b>PB Time:</b> ", round(seconds_to_period(best_segment_real_time), 2),
      "<br><b>Run Time:</b> ", round(seconds_to_period(pb_run_real_time), 2)
    )
    )

colors_48 <- tibble(
  attempt_id = unique(improvement_48$attempt_id),
  color = color_range(length(unique(improvement_48$attempt_id)))
)  

time_save_48 <- improvement_48 |> 
  slice_max(attempt_id) |> 
  select(attempt_id, segment_id, segment_real_time, best_segment_real_time) |> 
  mutate(time_save = segment_real_time - best_segment_real_time) |> 
  select(-c(segment_real_time, best_segment_real_time))

test_48 <- improvement_48 |> 
  left_join(colors_48, by = "attempt_id") |> 
  left_join(time_save_48, by = c("attempt_id", "segment_id")) |> 
  mutate(label = paste0(
    "<b>Run #", attempt_id, " ", as_date(attempt_started), "</b>",
    "<br><b>Track: </b>", segment_name,
    "<br><b>Split Time: </b>", round(seconds_to_period(segment_real_time), 2),
    "<br><b>Run Time: </b>", round(seconds_to_period(run_real_time), 2)
  ), 
  label = if_else(time_save > 0, paste0(label, "<br><b>Possible Time Save:</b> ", round(seconds_to_period(time_save), 3)), label, label)
  )

traces_48 <- ggplot() +
  geom_line(data = test_48, 
            aes(factor(segment_name), worst_run_diff, group = attempt_id, color = color, text = label)) + 
  geom_line(data = best_possible_time_48,
            aes(factor(segment_name), pb_run_diff, group = attempt_id, text = label), color = "gold", alpha = 0.7) +
  geom_point(data = test_48[which(test_48$time_save > 0), ], 
             aes(factor(segment_name), worst_run_diff, size = time_save, colour = "#F25041", text = label)) +
  scale_y_time() +
  scale_color_identity() +
  scale_size_continuous(range = c(.05, 2.75)) +
  # scale_alpha_continuous(range = c(.35, .8)) +
  labs(x = "",
       y = "") +
  theme_minimal() +
  theme(
    text = element_text(color = "#D2DDF9"),
    axis.text.x = element_text(
      angle = 45,
      hjust = 0.98,
      vjust = 0.9
    ),
    axis.text = element_text(size = 8, color = "#D2DDF9"),
    # axis.ticks = element_line(size = .2),
    plot.background = element_rect(fill = NA),
    panel.background = element_rect(fill = NA),
    panel.grid = element_line(linewidth = .2, color = "#4976E9"),
    # panel.border = element_rect(fill = NA, linewidth = .2, color = "#D2DDF9"),
    legend.position = "none"
  )

traces_48_p <- ggplotly(traces_48, tooltip = "text") |> 
  layout(
    margin = list(t = 60),
    title = list(text = "Improvement from Slowest Run<br><sup>48 Tracks, 150cc, No Items</sup>"
    )
    )
config(traces_48_p, displayModeBar = FALSE)
```

## C3 Violin {width="25%"}

```{r}
#| title: "Segment Times"
complete_48 <- the_48 |> 
  select(contains("segment")) |> 
  arrange(segment_id) |> 
  mutate(segment_name = fct_inorder(segment_name)) |> 
  mutate(
    worst_segment_real_time = max(segment_real_time),
    sd = sd(segment_real_time), 
    attempts = n(),
    label = paste0(
    "<b>", segment_name, "</b>",
    "<br><b>Attempts:</b> ", n(),
    "<br><b>Fastest:</b> ", clean_hms(best_segment_real_time),
    "<br><b>Slowest:</b> ", clean_hms(worst_segment_real_time),
    "<br><b>Average:</b> ", clean_hms(mean(segment_real_time)),
    "<br><b>Median:</b> ", clean_hms(median(segment_real_time)),
    "<br><b>Std Dev:</b> ", clean_hms(sd)
  ),
    .by = "segment_name")

violin_48 <- complete_48 |> violin_style(segment_name, segment_real_time)

violin_48_p <- ggplotly(violin_48, tooltip = "text") |> 
  layout(
    margin = list(t = 0, r = 10, b = 0, l = 0, pad = 0)
    )
config(violin_48_p, displayModeBar = FALSE)
```
